# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\YouTube\Client:
        arguments:
            $clientId: '279992250827-fr8n93ag0b40kq06p119vc3k3qfq8rqt.apps.googleusercontent.com'
            $clientSecret: '0kUtomIlHUC4wRfSepbA-Fs2'
            $callbackUrl: 'http://localhost:8080/api/oauth/callback'

    League\OAuth2\Client\Provider\AbstractProvider:
        factory: [ '@App\YouTube\Client', 'getOauthProvider' ]

    Redis:
        class: 'Redis'
        factory: ['Symfony\Component\Cache\Adapter\RedisAdapter', 'createConnection']
        arguments:
            $dsn: "redis://redis:6379"

    google_auth_redis_cache:
        class: Symfony\Component\Cache\Adapter\RedisAdapter
        arguments:
            $redisClient: '@Redis'
            $namespace: 'google_oauth_tokens'

    App\OAuth2\Storage\Bucket:
        class: App\OAuth2\Storage\CacheBucket
        arguments:
            $adapter: '@google_auth_redis_cache'

    App\OAuth2\Csrf\SessionBucket:
        class: App\OAuth2\Csrf\SessionBucket
